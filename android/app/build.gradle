plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// Trayendo el env para el manejo de las variables de entorno
// def getEnvValue(String name) {
//     def env = System.getenv()
//     if (env.containsKey(name)) {
//         return env[name]
//     }
//     return project.hasProperty(name) ? project.property(name) : null
// }

android {
    namespace "com.example.carpool_21_app"
    compileSdk flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.carpool_21_app"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        // Claves de API como campos de configuración de construcción
        // buildConfigField "String", "MAPS_API_KEY", "\"${getEnvValue("API_GOOGLE_MAPS")}\""
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            // buildConfigField "String", "MAPS_API_KEY", "\"${getEnvValue("API_GOOGLE_MAPS_PRODUCTION")}\""
        }
        debug {
            // buildConfigField "String", "MAPS_API_KEY", "\"${getEnvValue("API_GOOGLE_MAPS_DEVELOPMENT")}\""
        }
    }

    // Configurando entornos de despliegue DEV, STAGING y PRODUCCION DE LA APLICACION
    // flavorDimensions "env"
    // productFlavors {
    //     dev {
    //         dimension "env"
    //         applicationIdSuffix ".dev" // com.carpool_21_app.dev
    //         resValue "string", "app_name", "[DEV] CarPool 21"
    //     }

    //     staging {
    //         dimension "env"
    //         applicationIdSuffix ".dev" // com.carpool_21_app.dev
    //         resValue "string", "app_name", "[STG] CarPool 21"
    //     }

    //     // com.carpool_21_app - No lleva sufijo
    //     prod {
    //         dimension "env"
    //         resValue "string", "app_name", "CarPool 21"
    //     }
    // }
}

flutter {
    source '../..'
}

dependencies {}
